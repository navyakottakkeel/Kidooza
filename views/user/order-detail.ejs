<%- include("../partials/user/header") %>

    <style>
        .btn-cancel-item {
            border: 1px solid #ff3c1f;
            color: #ff3c1f;
            background: #fff;
            padding: 10px 25px;
            font-size: 14px;
            font-weight: 500;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-cancel-item:hover {
            background: #fff0ee;
        }

        .order-info-box {
            background: #fff;
            border: 1px solid #eee;
            padding: 15px;
            border-radius: 6px;
            font-size: 14px;
        }

        .order-info-box p {
            margin: 6px 0;
        }

        .btn-cancel-order {
            border: 1px solid #ff3c1f;
            color: #ff3c1f;
            background: #fff;
            padding: 12px;
            font-size: 15px;
            font-weight: 600;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-cancel-order:hover {
            background: #fff0ee;
        }

        .btn-review {
            border: 1px solid #06712a;
            color: #06712a;
            background: #fff;
            padding: 8px;
            font-size: 14px;
            font-weight: 500;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-review:hover {
            background: #c3e8cb;
        }

        .order-failure-box {
            display: flex;
            align-items: flex-start;
            gap: 15px;
            background: #fff4f4;
            border: 1px solid #f5c2c7;
            border-left: 5px solid #dc3545;
            padding: 16px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .failure-icon {
            font-size: 22px;
            color: #dc3545;
            margin-top: 3px;
        }

        .failure-content h4 {
            margin: 0;
            font-size: 16px;
            color: #b02a37;
            font-weight: 600;
        }

        .failure-content p {
            margin: 6px 0 12px;
            font-size: 14px;
            color: #555;
        }

        .retry-btn {
            display: inline-block;
            padding: 8px 16px;
            color: #2874f0;
            border-radius: 4px;
            text-decoration: none;
            font-size: 14px;
            transition: background 0.2s ease;
            width: 100%;
            border-color: #2874f0;
            border: 1px solid;
            text-align: center;
        }

        .retry-btn:hover {
            background-color: #96b9ee;
        }
    </style>


    <div class="container " style="margin-top:10rem;">

        <!-- Breadcrumb -->
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb p-2 rounded">
                <li class="breadcrumb-item">
                    <a href="/userProfile" class="text-decoration-none">Profile</a>
                </li>
                <li class="breadcrumb-item">
                    <a href="/orders" class="text-decoration-none">My Orders</a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Order detail</li>
            </ol>
        </nav>

        <div class="row">

            <!-- LEFT SIDE: Product Details & Status -->
            <div class="col-md-8">

                <div class="order-details-section mt-4">
                    <h5 class="fw-bold">Order Details</h5>

                    <!-- Order Info -->
                    <div class="order-info-box mt-3">
                        <p style="color: black;"><strong>Order No: <%= order._id %></strong></p>
                        <p><strong>Placed on:</strong>
                            <%= order.createdAt.toLocaleString("en-IN", { weekday: "short" , year: "numeric" ,
                                month: "short" , day: "numeric" , hour: "2-digit" , minute: "2-digit" }) %>
                        </p>
                        <p><strong>Order Total:</strong> ₹ <%= order.finalAmount %> | <%= order.orderedItems.length %>
                                    Item(s)</p>
                        <p><strong>Order Status:</strong>
                            <%= order.status %>
                        </p>

                        <!-- Cancel Order Button -->
                        <div class="mt-4">
                            <% if (["pending", "ordered" ].includes((order.status || "" ).trim().toLowerCase())) { %>
                                <button type="button" class="btn-cancel-order w-100"
                                    onclick="cancelOrder('<%= order._id %>')">CANCEL ORDER</button>

                                <% } else if(order.status==="Cancelled" ) { %>

                                    <div class="alert alert-warning" style="    border-color: #e0cf9c;">
                                        ⚠️ Order Cancelled.
                                    </div>
                                    <% } %>
                        </div>

                        <% if(order.status==="Order Not Placed" ) { %>

                            <div class="order-failure-box">
                                <div class="failure-icon">✘</div>
                                <div class="failure-content">
                                    <h4>Order not placed. Try ordering again</h4>
                                    <p>
                                        Due to an error with the payment, this order could not be placed.
                                        Please place a new order.<br />
                                        Payment was not successful. If money was deducted, please contact your bank.
                                    </p>
                                    <button id="retryBtn" class="retry-btn">Retry Payment</button>
                                    <!-- <a href="/products" id="retryBtn" class="retry-btn">Buy Again</a> -->
                                </div>
                            </div>

                            <% } %>

                    </div>
                </div>


                <br><br>

                <!-- Ordered products -->
                <% order.orderedItems.forEach(item=> { %>
                    <div class="card mb-3 shadow-sm">
                        <div class="card-body d-flex">

                            <!-- Product image -->
                            <img src="<%= item.image[0] %>" alt="product"
                                style="width:100px; height:100px; object-fit:cover; border-radius:8px;" class="me-3">


                            <!-- Product info -->
                            <div class="flex-grow-1">
                                <h6>
                                    <%= item.productName %>
                                </h6>
                                <p class="mb-1" style="font-size: smaller;">₹ <%= item.salePrice %> &nbsp;&nbsp; <s>₹
                                            <%= item.basePrice %>
                                        </s>
                                </p>
                                <p class="mb-1" style="font-size: smaller;">Qty : <%= item.quantity %>
                                        &nbsp;&nbsp;&nbsp;&nbsp; Color :
                                        <span class="colour-circle"
                                            style="display:inline-block; width:15px; height:15px; border-radius:20%;margin-left:5px;vertical-align:middle; background-color:<%= item.color %>; "></span>
                                </p>
                                <p class="mb-1" style="font-size: smaller;">Size : <%= item.size %>
                                </p>

                            </div>


                            <!-- Cancel button -->
                            <div class="text-end">

                                <small>
                                    <span
                                        class="fw-bold <%= order.status === 'Delivered' ? 'text-success' : 'text-primary' %>">
                                        <%= item.status %>
                                    </span>
                                </small>


                                <% if(item.status==="Pending" || item.status==="Ordered" ) { %>
                                    <form action="/order/<%= order._id %>/cancel-item/<%= item._id %>" method="POST"
                                        class="cancel-item-form">
                                        <div class="d-flex justify-content-center gap-3 mt-3">
                                            <button type="button" class="btn-cancel-item w-100 cancel-item-btn"
                                                data-orderid="<%= order._id %>" data-itemid="<%= item._id %>">CANCEL
                                                ITEM</button>
                                        </div>
                                    </form>
                                    <% } else if(item.status==="Shipped" ) { %>
                                        <small><br>
                                            <span class="fw-bold text-danger" style="">
                                                Order shipped, Cancel unavailable
                                            </span>
                                        </small>
                                        <% } else if(item.status==="Cancelled" ) { %>
                                            <small><br>
                                                <span class="fw-bold text-danger">
                                                    Order Cancelled
                                                </span>
                                            </small>

                                            <% } else if (item.status==="Delivered" ) { %>
                                                <% let deliveredOn=new Date(item.deliveredOn); let returnValidUntil=new
                                                    Date(deliveredOn); returnValidUntil.setDate(deliveredOn.getDate() +
                                                    14); let today=new Date(); %>

                                                    <% if (today <=returnValidUntil) { %>
                                                        <!-- Show return button if still within 14 days -->
                                                        <form
                                                            action="/order/<%= order._id %>/return-item/<%= item._id %>"
                                                            method="POST" class="return-item-form">
                                                            <div class="d-flex justify-content-center gap-3 mt-3">
                                                                <button type="button"
                                                                    class="btn-cancel-item w-100 return-item-btn"
                                                                    data-orderid="<%= order._id %>"
                                                                    data-itemid="<%= item._id %>">
                                                                    RETURN ITEM
                                                                </button>
                                                            </div>

                                                        </form>
                                                        <small>
                                                            <span class="fw-bold text-danger">
                                                                Return valid until: <%= returnValidUntil.toDateString()
                                                                    %>
                                                            </span>
                                                        </small>

                                                                <% } else { %>
                                                                    <!-- If return window expired -->
                                                                    <small><br><br>
                                                                        <span class="fw-bold text-muted">
                                                                            <i
                                                                                class="bi bi-info-circle-fill text-secondary"></i>
                                                                            Return window expired on <%=
                                                                                returnValidUntil.toDateString() %>
                                                                        </span>
                                                                    </small>
                                                                    <% } %>

                                                                    
                                                        <% if(item.status==="Delivered" ) { %>

                                                            <div class="d-flex justify-content-center gap-3 mt-3">
                                                                <button type="button" class="btn-review w-100"
                                                                    data-orderid="<%= order._id %>"
                                                                    data-itemid="<%= item._id %>">
                                                                    Review And Rating
                                                                </button>
                                                            </div>
                                                            <% } %>

                                                                        <% } %>

                            </div>

                        </div>
                    </div>
                    <% }) %>

            </div>

            <!-- RIGHT SIDE: Delivery + Price -->
            <div class="col-md-4">

                <!-- Delivery Address -->
                <div class="card mb-3">
                    <div class="card-header">Delivery Address</div>
                    <div class="card-body">
                        <p><strong>
                                <%= order.shippingAddress.name %>
                            </strong></p>
                        <p>
                            <%= order.shippingAddress.phone %>
                        </p>
                        <p>
                            <%= order.shippingAddress.landmark %>,
                                <%= order.shippingAddress.city %>,
                                    <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %>
                        </p>
                    </div>
                </div>

                <!-- Price Details -->
                <div class="card shadow-sm border-0 rounded-3">
                    <div class="card-header bg-light fw-bold text-primary">
                        Price Details
                    </div>
                    <div class="card-body">

                        <div class="d-flex justify-content-between mb-2">
                            <span class="text-muted">Listing Price</span>
                            <span>₹<%= order.totalPrice %></span>
                        </div>

                        <div class="d-flex justify-content-between mb-2">
                            <span class="text-muted">Discount</span>
                            <span class="text-success">-₹<%= order.discount %></span>
                        </div>

                        <% if(order.couponApplied && order.couponDiscount> 0) { %>
                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">Coupon (<%= order.couponCode %>)</span>
                                <span class="text-success">-₹<%= order.couponDiscount %></span>
                            </div>
                            <% } %>

                                <div class="d-flex justify-content-between mb-2">
                                    <span class="text-muted">Platform Fee</span>
                                    <span>₹<%= order.platformFee %></span>
                                </div>

                                <div class="d-flex justify-content-between mb-3">
                                    <span class="text-muted">Shipping Fee</span>
                                    <span>
                                        <% if(order.shippingFee===0) { %>
                                            <span class="badge bg-success">Free</span>
                                            <% } else { %>
                                                ₹<%= order.shippingFee %>
                                                    <% } %>
                                    </span>
                                </div>

                                <hr>

                                <div class="d-flex justify-content-between mb-3">
                                    <h6 class="fw-bold">Total Amount</h6>
                                    <h6 class="fw-bold text-danger">₹<%= order.finalAmount %>
                                    </h6>
                                </div>

                                <div class="mb-2">
                                    <span class="fw-semibold">Payment Method:</span>
                                    <span class="text-muted">
                                        <%= order.paymentMethod %>
                                    </span>
                                </div>

                                <div class="mb-3">
                                    <span class="fw-semibold">Payment Status:</span>
                                    <span class="text-muted">
                                        <%= order.paymentStatus %>
                                    </span>
                                </div>

                                <!-- Download Invoice Button -->
                                <div class="text-end">
                                    <a href="/order/<%= order._id %>/invoice"
                                        class="btn btn-sm btn-outline-primary rounded-pill">
                                        📄 Download Invoice
                                    </a>
                                </div>
                    </div>
                </div>



            </div>

        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function cancelOrder(orderId) {
            Swal.fire({
                title: 'Cancellation Request',
                text: 'Please note that the complete order will be cancelled.',
                input: 'select',
                inputOptions: {
                    'Ordered by mistake': 'Ordered by mistake',
                    'Found better discount': 'Found better discount',
                    'Expecting faster delivery': 'Expecting faster delivery',
                    'Do not want the order': 'Do not want the order'
                },
                inputPlaceholder: 'Select a reason',
                showCancelButton: true,
                confirmButtonText: 'Cancel Order',
                cancelButtonText: 'Clear',
                preConfirm: (reason) => {
                    if (!reason) {
                        Swal.showValidationMessage('Please select a reason for cancellation');
                        return false;
                    }
                    return reason;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/order/${orderId}/cancel`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ reason: result.value })
                    })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Order Cancelled',
                                    text: 'Your request has been submitted successfully ✅',
                                    confirmButtonText: 'Back to Order Details'
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire('Error', data.message, 'error');
                            }
                        });
                }
            });
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////


        document.querySelectorAll(".cancel-item-btn").forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.dataset.orderid;
                const itemId = this.dataset.itemid;

                const { value: reason } = await Swal.fire({
                    title: "Cancel Item",
                    input: "textarea",
                    inputLabel: "Reason for cancellation",
                    inputPlaceholder: "Enter your reason here...",
                    showCancelButton: true,
                    showDenyButton: true,
                    cancelButtonText: "Cancel",
                    denyButtonText: "Clear",
                    confirmButtonText: "Confirm",
                    preConfirm: (value) => {
                        if (!value) {
                            Swal.showValidationMessage("Please enter a reason");
                        }
                        return value;
                    }
                });

                if (reason) {
                    // Send request to backend
                    const res = await fetch(`/order/${orderId}/cancel-item/${itemId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ reason })
                    });

                    const data = await res.json();
                    if (data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Item Cancelled",
                            text: "Your cancellation request was successful ✅",
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            location.reload(); // Reload to update UI
                        });
                    } else {
                        Swal.fire("Error", data.message || "Something went wrong", "error");
                    }
                }
            });
        });

        //////////////////////////////////////////////////////////////////////////////////////////////

        document.querySelectorAll(".return-item-btn").forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.dataset.orderid;
                const itemId = this.dataset.itemid;

                const { value: reason } = await Swal.fire({
                    title: "Return Item",
                    input: "select",
                    inputOptions: {
                        'Defective/Damaged': 'Defective / Damaged',
                        'Wrong item received': 'Wrong item received',
                        'Size/fit issue': 'Size / Fit issue',
                        'Quality not as expected': 'Quality not as expected',
                        'Other': 'Other'
                    },
                    inputPlaceholder: "Select a reason for return",
                    showCancelButton: true,
                    confirmButtonText: "Return Item",
                    cancelButtonText: "Cancel",
                    preConfirm: (value) => {
                        if (!value) {
                            Swal.showValidationMessage("Please select a reason");
                        }
                        return value;
                    }
                });

                if (reason) {
                    // Send request to backend
                    const res = await fetch(`/order/${orderId}/return-item/${itemId}`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ reason })
                    });

                    const data = await res.json();
                    if (data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Return Requested",
                            text: "Your return request has been submitted ✅",
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            location.reload(); // Refresh UI
                        });
                    } else {
                        Swal.fire("Error", data.message || "Something went wrong", "error");
                    }
                }
            });
        });


    </script>

    <!-- Razorpay Script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
        document.getElementById("retryBtn").addEventListener("click", async () => {
            const orderId = "<%= order._id %>"; // pass from EJS

            const res = await fetch("/payment/razorpay/retry", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ orderId })
            });

            const data = await res.json();

            if (data.success) {
                const options = {
                    key: data.key,   // ✅ take from backend
                    amount: data.amount,
                    currency: data.currency,
                    name: "Kidooza",
                    description: "Retry Payment",
                    order_id: data.razorpayOrderId,   // ✅ fix here
                    handler: async function (response) {
                        try {
                            const verifyRes = await fetch("/payment/razorpay/verify", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    orderId: data.orderId,  // ✅ keep consistent
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyRes.json();
                            if (verifyData.success) {
                                window.location.href = "/orderplaced";
                            } else {
                                window.location.href = `/order/failure/${data.orderId}`;
                            }
                        } catch (err) {
                            console.error("Verify error:", err);
                            window.location.href = `/order/failure/${data.orderId}`;
                        }
                    },
                    theme: { color: "#3399cc" }
                };

                const rzp = new Razorpay(options);
                rzp.on("payment.failed", function (response) {
                    fetch("/payment/razorpay/failure", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            orderId: data.orderId,
                            error: response.error
                        })
                    }).finally(() => {
                        window.location.href = `/order/failure/${data.orderId}`;
                    });
                });

                rzp.open();
            }

        });
    </script>


    <script>
        document.querySelectorAll(".btn-review").forEach(button => {
            button.addEventListener("click", async function () {
                const orderId = this.dataset.orderid;
                const itemId = this.dataset.itemid;

                // Fetch existing review
                let existingReview = { rating: 0, reviewText: "" };
                try {
                    const res = await fetch(`/review/${orderId}/${itemId}`);
                    const data = await res.json();
                    if (data.success && data.review) {
                        existingReview.rating = data.review.rating;
                        existingReview.reviewText = data.review.reviewText;
                    }
                } catch (err) {
                    console.error("Error fetching review:", err);
                }

                const { value: formValues } = await Swal.fire({
                    title: `<span style="color:#333;">💬 Review & Rating</span>`,
                    html: `
            <div id="starRating" style="display:flex;justify-content:center;gap:8px;font-size:28px;cursor:pointer;margin-bottom:15px;">
              ${[1, 2, 3, 4, 5].map(i => `<i class="fa-solid fa-star" id="star-${i}" data-value="${i}" style="color:#ddd;"></i>`).join('')}
            </div>
            <textarea id="reviewText" class="swal2-textarea" placeholder="Write your review..." style="
              height:115px;
              width:250px;
              border-radius:12px;
              border:1px solid #ccc;
              padding:10px;
              font-size:14px;
              background:#fff;
              color:#333;
              resize:none;
              box-shadow: inset 0 1px 5px rgba(0,0,0,0.1);
            ">${existingReview.reviewText}</textarea>
          `,
                    focusConfirm: false,
                    showCancelButton: true,
                    cancelButtonText: "Cancel",
                    confirmButtonText: "Submit Review",
                    customClass: {
                        popup: 'swal2-light-card',
                        confirmButton: 'swal2-btn-confirm',
                        cancelButton: 'swal2-btn-cancel'
                    },
                    preConfirm: () => {
                        const rating = document.querySelectorAll('#starRating i.text-warning').length;
                        const reviewText = document.getElementById('reviewText').value.trim();
                        if (!rating) {
                            Swal.showValidationMessage("Please select a star rating");
                            return false;
                        }
                        if (!reviewText) {
                            Swal.showValidationMessage("Please write a review");
                            return false;
                        }
                        return { rating, reviewText };
                    },
                    didOpen: () => {
                        const stars = document.querySelectorAll('#starRating i');
                        stars.forEach(star => {
                            star.addEventListener('mouseenter', () => {
                                const value = parseInt(star.dataset.value);
                                stars.forEach((s, i) => {
                                    s.style.color = i < value ? '#ffb400' : '#ddd';
                                    s.style.textShadow = i < value ? '0 0 5px #ffb400' : 'none';
                                });
                            });
                            star.addEventListener('mouseleave', () => {
                                stars.forEach((s, i) => {
                                    s.style.color = i < existingReview.rating ? '#ffc107' : '#ddd';
                                    s.style.textShadow = i < existingReview.rating ? '0 0 5px #ffc107' : 'none';
                                });
                            });
                            star.addEventListener('click', () => {
                                const value = parseInt(star.dataset.value);
                                existingReview.rating = value;
                                stars.forEach((s, i) => {
                                    s.classList.toggle('text-warning', i < value);
                                    s.style.color = i < value ? '#ffc107' : '#ddd';
                                    s.style.textShadow = i < value ? '0 0 5px #ffc107' : 'none';
                                });
                            });
                        });

                        // Prefill existing rating
                        stars.forEach((s, i) => {
                            if (i < existingReview.rating) {
                                s.classList.add('text-warning');
                                s.style.color = '#ffc107';
                                s.style.textShadow = '0 0 5px #ffc107';
                            }
                        });
                    }
                });

                if (formValues) {
                    try {
                        const res = await fetch("/review/add", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId,
                                itemId,
                                rating: formValues.rating,
                                reviewText: formValues.reviewText
                            })
                        });

                        const data = await res.json();
                        if (data.success) {
                            Swal.fire({
                                icon: "success",
                                title: "Thank you!",
                                text: data.message,
                                timer: 2000,
                                showConfirmButton: false,
                                background: '#fff',
                                color: '#333'
                            }).then(() => location.reload());
                        } else {
                            Swal.fire("Error", data.message || "Something went wrong", "error");
                        }
                    } catch (err) {
                        Swal.fire("Error", "Unable to submit review", "error");
                    }
                }
            });
        });
    </script>

    <style>
        /* Light-themed SweetAlert */
        .swal2-light-card {
            background: #fff !important;
            border-radius: 20px !important;
            padding: 25px 20px !important;
            font-family: 'Poppins', sans-serif;
            color: #333;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

        .swal2-btn-confirm {
            background: linear-gradient(90deg, #56ab2f, #a8e063) !important;
            color: #fff !important;
            font-weight: 600;
            padding: 10px 22px;
            border-radius: 10px !important;
            font-size: 14px;
            border: none;
            box-shadow: 0 4px 8px rgba(86, 171, 47, 0.3);
        }

        .swal2-btn-confirm:hover {
            background: linear-gradient(90deg, #4da02c, #8ed24f) !important;
        }

        .swal2-btn-cancel {
            background: #f0f0f0 !important;
            color: #555 !important;
            font-weight: 500;
            border-radius: 10px !important;
            padding: 10px 22px;
            border: none;
            margin-right: 10px;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .swal2-btn-cancel:hover {
            background: #e2e2e2 !important;
        }
    </style>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">


    <%- include("../partials/user/footer") %>